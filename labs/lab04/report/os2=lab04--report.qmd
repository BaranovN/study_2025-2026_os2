---
# Preamble

## Author
author:
  name: Баранов Никита Дмитриевич
## Title
title: "Отчёт о лабораторной работе"
subtitle: "Лабораторная работа 4"
license: "CC BY"
## Generic options
lang: ru-RU
number-sections: true
toc: true
toc-title: "Содержание"
toc-depth: 2
## Crossref customization
crossref:
  lof-title: "Список иллюстраций"
  lot-title: "Список таблиц"
  lol-title: "Листинги"
## Bibliography
bibliography:
  - bib/cite.bib
csl: _resources/csl/gost-r-7-0-5-2008-numeric.csl
## Formats
format:
### Pdf output format
  pdf:
    toc: true
    number-sections: true
    colorlinks: false
    toc-depth: 2
    lof: true # List of figures
    lot: true # List of tables
#### Document
    documentclass: scrreprt
    papersize: a4
    fontsize: 12pt
    linestretch: 1.5
#### Language
    babel-lang: russian
    babel-otherlangs: english
#### Biblatex
    cite-method: biblatex
    biblio-style: gost-numeric
    biblatexoptions:
      - backend=biber
      - langhook=extras
      - autolang=other*
#### Misc options
    csquotes: true
    indent: true
    header-includes: |
      \usepackage{indentfirst}
      \usepackage{float}
      \floatplacement{figure}{H}
### Docx output format
  docx:
    toc: true
    number-sections: true
    toc-depth: 2
---

# Цель работы

Получить навыки работы с репозиториями и менеджерами пакетов.

# Задание

1.  Изучить работу с репозиториями и пакетами с помощью утилиты `dnf`.
2.  Получить навыки установки, удаления и получения информации о пакетах.
3.  Освоить работу с группами пакетов.
4.  Изучить истории операций `dnf` и научиться отменять действия.
5.  Получить навыки ручной установки пакетов из RPM-файлов с помощью утилиты `rpm`.
6.  Изучить возможности утилиты `rpm` для получения информации о установленных пакетах, их файлах и скриптах.

# Выполнение лабораторной работы

## Работа с репозиториями и пакетами через DNF

В консоли был выполнен переход в режим суперпользователя и осуществлён переход в каталог `/etc/yum.repos.d` для изучения репозиториев системы (рис. [-@fig:001]).

![Переход в каталог с репозиториями и просмотр их содержимого](image/1.png){#fig:001 width=70%}

Был выведен список активных репозиториев с помощью команды `dnf repolist` (рис. [-@fig:002]). На экран выведены репозитории `appstream`, `baseos`, `extras` (стандартные репозитории Rocky Linux 9) и `gh-cli` (дополнительный репозиторий для GitHub CLI). Это означает, что система настроена для получения пакетов из этих источников.

![Список активных репозиториев системы](image/2.png){#fig:002 width=70%}

Далее был выполнен поиск пакетов, связанных со словом "user", с помощью команды `dnf search user` (рис. [-@fig:002], [-@fig:003]). Команда вывела обширный список пакетов, в именах или описаниях которых встречается указанное слово. В списке присутствуют пакеты для управления пользователями (`libuser`, `usermode`), документации (`gnome-user-docs`), сервисов (`accountsservice`), а также множество других пакетов, так или иначе связанных с концепцией пользователя в системе.

![Поиск пакетов по ключевому слову "user" (часть 1)](image/2.png){#fig:002 width=70%}
![Поиск пакетов по ключевому слову "user" (часть 2)](image/3.png){#fig:003 width=70%}

Был выполнен поиск, получение информации и установка пакета `nmap` (сетевого сканера) (рис. [-@fig:004]). Команда `dnf search nmap` показала, что доступны два пакета: `nmap` и `nmap-ncat`. Команда `dnf info nmap` вывела подробную информацию о основном пакете. Разница между командами `dnf install nmap` и `dnf install nmap\*` заключается в том, что первая устанавливает только указанный пакет (`nmap`), а вторая, благодаря использованию wildcard (`*`), пытается установить все пакеты, имена которых начинаются с `nmap` (в данном случае это `nmap` и `nmap-ncat`).

![Поиск, получение информации и установка пакета nmap](image/4.png){#fig:004 width=70%}

После установки пакеты `nmap` и `nmap-ncat` были удалены (рис. [-@fig:005]). Команда `dnf remove nmap` удалила основной пакет, а команда `dnf remove nmap\*` удалила оставшийся пакет `nmap-ncat`.

![Удаление пакетов nmap и nmap-ncat](image/5.png){#fig:005 width=70%}

## Работа с группами пакетов

Был получен список групп пакетов, доступных в системе, с помощью команды `dnf groups list` (рис. [-@fig:006]). Для получения вывода на английском языке (во избежание проблем с локализацией) была использована команда `LANG=C dnf groups list`. Была получена информация о группе "RPM Development Tools" с помощью `dnf groups info`, а затем эта группа была установлена (рис. [-@fig:007]). В процессе установки были добавлены пакеты `rpmdevtools` и его зависимость `python3-argcomplete`.

![Список групп пакетов](image/6.png){#fig:006 width=70%}
![Установка группы пакетов "RPM Development Tools"](image/7.png){#fig:007 width=70%}

## История операций DNF и отмена действий

Была просмотрена история операций `dnf` (рис. [-@fig:008]). Команда `dnf history` вывела таблицу с ID, командной строки, датой, действием и количеством изменённых пакетов для каждой операции. Была предпринята попытка отменить действие с ID 6 (установка `gh`) и действие с ID 16 (установка `nmap`). Отмена установки `gh` была прервана ([y/N]: n), а отмена установки `nmap` не выполнила никаких действий, так как пакет уже был удалён ранее, о чём система выдала предупреждение.

![Просмотр истории DNF и попытка отмены действий](image/8.png){#fig:008 width=70%}

## Установка и анализ пакета Lynx вручную

Был выполнен поиск пакета `lynx` (текстовый браузер) и он был загружен в кэш без установки с помощью команды `dnf install lynx --downloadonly` (рис. [-@fig:009]).

![Поиск и загрузка пакета lynx](image/9.png){#fig:009 width=70%}

С помощью команды `find` был найден путь к загруженному RPM-файлу. После перехода в соответствующий каталог пакет был установлен вручную с помощью команды `rpm -Uhv` (рис. [-@fig:010]).

![Поиск и ручная установка RPM-пакета lynx](image/9.png){#fig:009 width=70%}
![Ручная установка RPM-пакета lynx](image/10.png){#fig:010 width=70%}

Было определено расположение исполняемого файла `lynx` с помощью `which lynx`. Команда `rpm -qf $(which lynx)` подтвердила, что файл принадлежит только что установленному пакету. Команда `rpm -qi lynx` вывела подробную информацию о пакете: версию, релиз, архитектуру, дату сборки, описание и другую метаинформацию (рис. [-@fig:010]).

![Определение принадлежности файла и информация о пакете](image/10.png){#fig:010 width=70%}

Команда `rpm -ql lynx` вывела список всех файлов, установленных пакетом `lynx` (рис. [-@fig:011], [-@fig:014]). Команда `rpm -qd lynx` вывела список только файлов документации пакета. Попытка просмотреть документацию с помощью `man lynx /usr/share/doc/lynx/INSTALLATION` завершилась ошибкой, так как синтаксис команды `man` предполагает указание только имени страницы, а не пути к файлу. Просмотр руководства `man lynx` был выполнен успешно (рис. [-@fig:013]).

![Список всех файлов пакета lynx (часть 1)](image/11.png){#fig:011 width=70%}
![Список всех файлов пакета lynx (часть 2)](image/14.png){#fig:014 width=70%}
![Просмотр man-страницы пакета lynx](image/13.png){#fig:013 width=70%}

Команда `rpm -qc lynx` вывела список конфигурационных файлов пакета: `/etc/lynx-site.cfg`, `/etc/lynx.cfg`, `/etc/lynx.lss` (рис. [-@fig:015]). Команда `rpm -q --scripts lynx` не вывела никакой информации, что означает отсутствие скриптов пред-/пост-установки в данном пакете.

![Конфигурационные файлы пакета lynx и проверка скриптов](image/15.png){#fig:015 width=70%}

После проверки пакет `lynx` был удалён с помощью команды `rpm -e lynx` (рис. [-@fig:015]).

## Установка и анализ пакета Dnsmasq

Была проверена информация о пакете `dnsmasq` и он был установлен с помощью `dnf install dnsmasq` (рис. [-@fig:016]). Пакет уже был установлен в системе ранее.

![Информация и установка пакета dnsmasq](image/16.png){#fig:016 width=70%}

Было определно расположение исполняемого файла (`which dnsmasq`) и подтверждена его принадлежность пакету `dnsmasq` (`rpm -qf`). Команда `rpm -qi dnsmasq` вывела подробную информацию о пакете: это легковесный DNS-, DHCP- и TFTP-сервер версии 2.85 (рис. [-@fig:016]).

Команда `rpm -ql dnsmasq` вывела список всех файлов пакета, а `rpm -qd dnsmasq` — список файлов документации (рис. [-@fig:017], [-@fig:019]). Команда `rpm -qc dnsmasq` показала конфигурационные файлы пакета: `/etc/dbus-1/system.d/dnsmasq.conf` и `/etc/dnsmasq.conf`.

![Список файлов и документации пакета dnsmasq](image/17.png){#fig:017 width=70%}

![Документация и конфигурационные файлы пакета dnsmasq](image/19.png){#fig:019 width=70%}

В отличие от `lynx`, пакет `dnsmasq` содержит скрипты, которые выполняются при его установке и удалении (рис. [-@fig:019]). Команда `rpm -q --scripts dnsmasq` вывела эти скрипты:
*   **preinstall**: Создаёт системного пользователя и группу `dnsmasq` перед установкой, если они не существуют.
*   **postinstall**: Если это первоначальная установка, уведомляет systemd о необходимости загрузить юнит-файл службы.
*   **preuninstall**: Если это полное удаление (а не обновление), уведомляет systemd о необходимости выгрузить юнит-файл службы.
*   **postuninstall**: Если это обновление, уведомляет systemd о необходимости перезапустить службу.

Эти скрипты обеспечивают правильную интеграцию серверного пакета `dnsmasq` с системой (создание учётной записи, регистрация службы).

# Выводы

Мы получили навыки работы с репозиториями и менеджерами пакетов.
